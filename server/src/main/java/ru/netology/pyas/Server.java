/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.netology.pyas;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

public class Server {

    private final static int PORT = 8080;

    public static void main(String[] args) {
        ServerSocket serverSocket;
        try {
            serverSocket = new ServerSocket(PORT);
        } catch (IOException e) {
            System.out.println("Ошибка сокета сервера: " + e.getMessage());
            return;
        }

        System.out.println("Сервер запущен");

        while (true) {
            try (
                Socket clientSocket = serverSocket.accept();
                DataInputStream in = new DataInputStream(clientSocket.getInputStream());
                DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
            ) {
                int num = in.readInt();
                long fib = fibonacci(num);
                out.writeLong(fib);
            } catch (IOException e) {
                System.out.println("Ошибка сокета клиента: " + e.getMessage());
                break;
            }
        }

        try {
            serverSocket.close();
        } catch (IOException e) {
            System.out.println("Ошибка закрытия сокета сервера: " + e.getMessage());
        }
    }

    private static long fibonacci(int n) {
        if (n <= 1) {
            return 0;
        }
        if (n == 2) {
            return 1;
        }

        long fibNMinus2 = 0;
        long fibNMinus1 = 1;
        long fib = 0;

        for (int i = 3; i <= n; ++i) {
            fib = fibNMinus1 + fibNMinus2;
            fibNMinus2 = fibNMinus1;
            fibNMinus1 = fib;
        }

        return fib;
    }
}
